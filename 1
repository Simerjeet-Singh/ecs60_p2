#include <iostream>
#include "LeafNode.h"
#include "InternalNode.h"
#include "QueueAr.h"

using namespace std;


LeafNode::LeafNode(int LSize, InternalNode *p,
                   BTreeNode *left, BTreeNode *right) : BTreeNode(LSize, p, left, right)
{
    values = new int[LSize];
}  // LeafNode()

void LeafNode::leftShift()
{
    for(int i = 0;i<count-1;i++){
        values[i] = values[i+1];
    }
    values[count-1] = 0;
   // cout << "here leftshift" <<endl;
    count--;
}

int LeafNode::getMinimum()const
{
    if(count > 0)  // should always be the case
        return values[0];
    else
        return 0;
    
} // LeafNode::getMinimum()


LeafNode* LeafNode::insert(int value)
{
    // students must write this
    if (count < leafSize)
    {
        int pos = insert_pos(value);
	//cout << "Position before inserting: "<< pos <<  "Count before inserting: "<< count << endl;
	//cout << "count < leafSize" << endl;
        values[pos] = value;
        count++;
    }// LeafNode Full, create new LeafNode
    //split() // create new LeafNode
    else //current leaf node is full
    {
	//cout << "current leaf node is full" << endl;
        if(leftSibling != NULL && leftSibling->getCount() < leafSize)
        {
            if(value>values[0])
            {
                leftSibling->insert(values[0]);
                leftShift();
                insert(value);
            }
            else
            {
                leftSibling->insert(value);
            }
        }
        else if(rightSibling != NULL && rightSibling->getCount() < leafSize)
        {
            if(value<values[count-1])
            {
                rightSibling->insert(values[count-1]);
                values[count-1] = 0; count--;
                insert(value);
            }
            else
            {
                rightSibling->insert(value);
            }
        }
        else //need to split
        {
		//cout << "NEED To split" << endl;
            LeafNode *newLeafNode = new LeafNode(leafSize, parent, this, rightSibling);
            if(!rightSibling) { //rightsibling is not there
                rightSibling = newLeafNode;
                newLeafNode->setLeftSibling(this);
            }
            else{
                newLeafNode->setLeftSibling(this);
                newLeafNode->setRightSibling(rightSibling);
                this->getRightSibling()->setLeftSibling(newLeafNode);//not sure about ->
                this->setRightSibling(newLeafNode);
            }
            if(leafSize%2==1){
                int position = position_odd(value);
                if(position==leafSize/2){
                    for(int i = position; i<count; i++){
                        rightSibling->insert(values[i]);
                        count--;
                    }
                    insert(value);
                }
                else{
                  for(int i=position;i<count;i++){
                    rightSibling->insert(values[i]);
                    count--;
                  }        
                  rightSibling->insert(value);
                }
            }
            else {//even
              int position_even = position_evenf(value);
              if(position_even == leafSize/2){
                for(int i = position_even;i<count;i++){
                  rightSibling->insert(values[i]);
                  count--;
                }
                rightSibling->insert(value);
              }
              else{
                for(int i=position_even;i<count;i++){
                  rightSibling->insert(values[i]);
                  count--;
                }
                this->insert(value);
              }
            }
            return newLeafNode;
        }   
    }
    return NULL; // to avoid warnings for now.
}
// LeafNode::insert()
int LeafNode::position_odd(int value){
    int pos = leafSize/2;
    if(values[pos] > value)
        return pos;
    else
        return pos+1;
    
}

int LeafNode::position_evenf(int value){
    int pos = leafSize/2;
    if(values[pos-1] > value)
        return pos-1;
    else
        return pos;
    
}

void LeafNode::print(Queue <BTreeNode*> &queue)
{
    cout << "Leaf: ";
    for (int i = 0; i < count; i++)
        cout << values[i] << ' ';
    cout << endl;
} // LeafNode::print()

/*int LeafNode::max_sort(int value)
{
    int tmp;
    for (int i = count - 1; i>=0; i--) {
        if values[i] > value {
            values[i+1] = values[i];
        }
        
    }
    return values[count-1];
    
}//sort function
*/
//sorting and giving the position where to insert
int LeafNode::insert_pos(int value)//finding the position where we want to insert
{
    if(count == 0)
    {
        return 0;
    }
    else if(values[count-1]<value)
	    return count;
    else
    {
        for (int i = count-1; i>=0; i--)
        {
	    if (values[i] > value) {
                values[i+1] = values[i];
            }
            else
            {
                return i+1;
            }
            
        }
    }
return 0;  // check this element inserting is smallest element
}//done with insert_pos

